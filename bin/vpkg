#!/usr/bin/env bash

# shellcheck disable=SC2250

# preserve the command line arguments
export ORIG_CMDLINE=($@)

# utility functions

# bail on error with a helpful message
on_error() {
    local prog fun lineno rc
    prog="$(basename "$0")"
    read -r fun lineno rc <<< "$@"
    echo "error at ${fun} in ${prog}:${lineno} with exit code ${rc}."
    [[ -z "${VPKG_DEBUG}" ]] || caller
    exit ${rc}
}

# exit with error code and helpful message
error() {
    local message
    read -r message <<< "$@"
    echo "Error: ${message}."
    exit 1
}

# ...
usage() {
    echo "Usage: vpkg COMMAND [OPTIONS]"
    echo
    echo "Commands:"
    echo "  add - add a vim plugin"
    echo "  delete - remove a vim plugin"
    echo "  list - list installed plugins"
    echo "  update - update vim configuration"
    echo "  push - push local changes to the repository."
    exit 0
}

# verify if the dependencies are available, in the most simple way
requires() {
    local cmd i
    local -a nope
    for cmd in "$@"; do
        command -v "${cmd}" &> /dev/null || nope+=("$cmd")
    done
    if ((${#nope[@]} > 0)); then
        echo "Some of the required dependencies are not available:"
        for ((i=0; i<${#nope[@]}; i++)); do
            echo "* ${nope[$i]}"
        done
        error "please install the dependencies in order to proceed"
    fi
}

# make sure mr is not an alias
mr() {
   command mr "$@"
}

spinner() {
    trap "tput cnorm; exit" TERM
    local -a spinner
    spinner=("ðŸ•›" "ðŸ•’" "ðŸ••" "ðŸ•˜")
    tput civis
    while :; do
        for ((i=0; i<${#spinner[@]}; i++)); do
            printf "%s" "${spinner[$i]}"
            sleep .1
            printf "\b\b"
        done
    done
}

# work around places that don't use reasonable find
find() {
    if command -v gfind &>"${VPKG_LOGFILE}"; then
        cmd="gfind"
    elif command -v find &>"${VPKG_LOGFILE}"; then
        cmd="find"
    else
        error "no suitable find command found"
    fi
    command ${cmd} "$@"
}

# use git to manage .ini config files
initool() {
    command git config "$@"
}

# check if the URI is valid
uri_exists() {
    local uri status
    read -r uri <<< "$@"
    status=$(curl -s -o "${VPKG_LOGFILE}" -w "%{http_code}" "${uri}")
    if [[ "${status}" =~ [23][0-9][0-9] ]]; then
        return 0
    else
        return 1
    fi
}

# check if github repo exists
github_exists() {
    local user name status
    read -r user name <<< "$@"
    uri="https://api.github.com/repos/${user}/${name}"
    status=$(curl -s -o "${VPKG_LOGFILE}" -w "%{http_code}" "${uri}")
    if [[ "${status}" =~ [2][0-9][0-9] ]]; then
        return 0
    else
        return 1
    fi
}

git_exists() {
    local uri status rc
    read -r uri <<< "$@"
    status=$(rc=0; git ls-remote "${uri}" &>"${VPKG_LOGFILE}" || rc=$?; echo $rc)
    if [[ "${status}" == 128 ]]; then
        return 1
    else
        return 0
    fi
}

reexec() {
    local message="$*"
    echo "${message}"
    exec "$0" "${ORIG_CMDLINE[@]}"
}

# plugin management

plugin_list() {
    gawk '$0 ~ /\[.*\]/ && $0 !~ /(DEFAULT|pathogen)/ { gsub(/[\[\]]/, ""); gsub(/[^\/]+\//, ""); print }' "${mrconfig}"
}

plugin_add() {
    local src name uri user
    src="$1"; shift
    case "${src}" in
        github)
            read -r user name <<< "$@"
            plugin_add_github "${user}" "${name}" && plugin_register "${name}"
            ;;
        git)
            read -r uri name <<< "$@"
            : "${name:="$(basename "${uri/#@(http?|git*|ssh):\/\/}" .git)"}"
            plugin_add_git "${name}" "${uri}" && plugin_register "${name}"
            ;;
    esac
}

plugin_add_github() {
    local user name uri
    read -r user name <<< "$@"
    github_exists "${user}" "${name}" || error "no github repository ${name} found for user ${user}"
    uri="https://github.com/${user}/${name}.git/"
    plugin_add_git "${name}" "${uri}"
}

plugin_add_git() {
    local name uri
    read -r name uri <<< "$@"
    git_exists "${uri}" || error "no git repository ${name} exists at ${uri}"
    [[ -d "start/${name}" ]] && error "plugin directory ${name} already exists" || git clone --recursive "${uri}" "start/${name}"
}

plugin_add_hg() {
    local name uri
    read -r name uri <<< "$@"
    [[ -d "${name}" ]] && return 1 || hg clone "${uri}" "${name}"
}

plugin_add_svn() {
    local name uri
    read -r name uri <<< "$@"
    [[ -d "${name}" ]] && return 1 || svn co "${uri}" "${name}"
}

plugin_update() {
    if [[ "$1" =~ (-v|--verbose) ]]; then
        mr update
    else
        echo -n "Updating plugins... "; spinner & spid=$!
        mr -mqs update || (kill -TERM "${spid}"; echo " at least one of the repositories failed.") && (kill -TERM "${spid}"; echo " done.")
    fi
}

plugin_delete() {
    local name
    read -r name <<< "$@"
    [[ -d "start/${name}" ]] && rm -rf "start/${name}"
    plugin_unregister "${name}"
}

plugin_register() {
    local name
    read -r name <<< "$@"
    mr register "start/${name}"
    vcsh "${cfg_repo}" add "${mrconfig}"
    vcsh "${cfg_repo}" commit -m "Plugin ${name} registered in .mrconfig."
    if [[ -n "${vcsh_push}" ]]; then
        vcsh "${cfg_repo}" push
    fi
}

plugin_deactivate() {
    local name
    read -r name <<< "$@"
    [[ -d "start/${name}" ]] && (
        mv "start/${name}" "opt/${name}" && \
            sed -i -e "s@start/${name}@opt/${name}@g" "${mrconfig}" && \
            vcsh "${cfg_repo}" add "${mrconfig}" >${VPKG_LOGFILE} 2>&1 && \
            vcsh "${cfg_repo}" commit -m "Plugin ${name} deactivated." >${VPKG_LOGFILE} 2>&1 && \
            echo "Plugin ${name} deactivated. Use packadd ${name} to load manually."
    )
}

plugin_activate() {
    local name
    read -r name <<< "$@"
    [[ -d "opt/${name}" ]] && (
        mv "opt/${name}" "start/${name}" && \
            sed -i -e "s@opt/${name}@start/${name}@g" "${mrconfig}" && \
            vcsh "${cfg_repo}" add "${mrconfig}" >${VPKG_LOGFILE} 2>&1 && \
            vcsh "${cfg_repo}" commit -m "Plugin ${name} activated." >${VPKG_LOGFILE} 2>&1 && \
            echo "Plugin ${name} will be loaded on startup."
    )
}

plugin_unregister() {
    local name
    read -r name <<< "$@"
    initool --file "${mrconfig}" --remove-section "start/${name}" || true
    vcsh "${cfg_repo}" add "${mrconfig}"
    vcsh "${cfg_repo}" commit -m "Plugin ${name} unregistered from .mrconfig."
    if [[ -n "${vcsh_push}" ]]; then
        vcsh "${cfg_repo}" push
    fi
}

plugin_sync() {
    local plugins dir
    local -a dirs
    plugins=$(plugin_list)
    while read -r dir; do
        dirs+=("${dir}")
    done < <(find "${bundles}/start" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
    for ((i=0; i<${#dirs[@]}; i++)); do
        dir="${dirs[$i]}"
        if [[ ! "${plugins}" == *${dir}* ]]; then
            rm -rf "start/${dir}" && echo "dangling directory removed: ${dir}."
        fi
    done
}

plugin_helptags() {
   local vim_cmd="nvim" vim_script="packadd vim-pathogen | call pathogen#helptags() | qa!"
   command -v "${vim_cmd}" &> /dev/null || vim_cmd="vim"
   case "${vim_cmd}" in
      nvim)
         nvim -MR -Es -V -E -c "${vim_script}" >"${VPKG_LOGFILE}" 2>&1
         ;;
      vim)
         vim -MR -T dumb -V -E -c "${vim_script}" >"${VPKG_LOGFILE}" 2>&1
         ;;
   esac
}

update_all() {
    config_update "$@"
    plugin_update "$@"
    plugin_sync "$@"
    plugin_helptags
}

config_update() {
    local sha
    sha="$(sha512sum "$0")"
    echo -n "Updating configuration... "
    vcsh "${cfg_repo}" pull >/dev/null 2>&1 && echo "done." || echo "failed."
    echo -n "${sha}" | sha512sum --check --status || reexec "$(basename "$0") changed, re-executing"
}

vpkg_prep() {
    [[ -f "$HOME/.mrtrust" ]] || touch "$HOME/.mrtrust"

    grep -q "${mrconfig}" "$HOME/.mrtrust" || \
        echo "${mrconfig}" >> "$HOME/.mrtrust"

    for dir in undo backup; do
        [ -d "${dir}" ] || mkdir -p "${vimdir}/${dir}"
    done

    for dir in start opt; do
        [[ -d "${bundles}/${dir}" ]] || mkdir -p "${bundles}/${dir}"
    done
}

main() {
    requires vim git mr vcsh curl
    # error handling
    [[ -z "${VPKG_DEBUG}" ]] || set -x
    set -o errexit
    set -o errtrace
    set -o pipefail
    #set -o nounset
    trap 'on_error ${FUNCNAME[0]} ${LINENO} ${?}' ERR INT HUP

    : "${VPKG_LOGFILE:=/dev/null}"
    exec 2>"${VPKG_LOGFILE}"

    # sanitize the environment a bit...
    for envvar in GIT_DIR VCSH_DIRECTORY VCSH_REPO_NAME VCSH_COMMAND; do
        unset "${envvar}"
    done

    export vimdir="$HOME/.vim"
    export bundles="${vimdir}/pack/bundle"
    export mrconfig="${bundles}/.mrconfig"
    export cfg_repo="rc-vim"
    vpkg_prep

    cd "${bundles}"
    if (( $# < 1 )); then
        set -- "help"
    fi
    action="$1"; shift
    case "${action}" in
        add)
            plugin_add "$@" ;;
        del|delete|remove)
            for plugin in "$@"; do
                plugin_delete "${plugin}"
            done
            ;;
        update)
            update_all "$@";;
        activate|enable)
            plugin_activate "$@";;
        deactivate|disable)
            plugin_deactivate "$@";;
        list)
            plugin_list ;;
        push)
            vcsh push ;;
        sync)
            plugin_sync
            plugin_helptags
            ;;
        help|*)
            usage ;;
    esac
}

main "$@"
