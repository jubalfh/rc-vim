#!/bin/bash

# requires: git, mr, vcsh

# utility functions
on_error() {
    local prog fun lineno rc
    prog=$(basename $0)
    read -r fun lineno rc <<< "$@"
    echo "error at ${fun} in ${prog}:${lineno} with exit code ${rc}."
    [[ -z "${VPKG_DEBUG}" ]] || caller
    exit ${rc}
}

usage() {
    echo "Usage: vpkg COMMAND [OPTIONS]"
    echo
    echo "Commands:"
    echo "  add - add a vim plugin"
    echo "  delete - remove a vim plugin"
    echo "  list - list installed plugins"
    echo "  update - update vim configuration"
    echo "  push - push local changes to the repository."
    exit 0
}

# make sure mr is not an alias
mr() {
   command mr "$@"
}

# use git to manage .ini config files
initool() {
    command git config "$@"
}

# plugin management

plugin::list() {
    awk '$0 ~ /\[.*\]/ && $0 !~ /DEFAULT/ { gsub(/[\[\]]/, ""); print }' "${mrconfig}"
}
plugin::add() {
    local src name uri user
    src="$1"; shift
    case "${src}" in 
        github)
            read -r user name <<< "$@"
            uri="https://github.com/${user}/${name}.git/"
            plugin::add::git "${name}" "${uri}" && plugin::register "${name}"
            ;;
        git)
            read -r uri name <<< "$@"
            : ${name:=$(basename ${uri/#@(http?|git*|ssh):\/\/} .git)}
            plugin::add::git "${name}" "${uri}" && plugin::register "${name}"
            ;;
    esac
}

plugin::add::git() {
    local name uri
    read -r name uri <<< "$@"
    [[ -d "${name}" ]] && return 1 || git clone --recursive "${uri}" "${name}"
}

plugin::add::hg() {
    local name uri
    read -r name uri <<< "$@"
    [[ -d "${name}" ]] && return 1 || hg clone "${uri}" "${name}"
}

plugin::add::svn() {
    local name uri
    read -r name uri <<< "$@"
    [[ -d "${name}" ]] && return 1 || svn co "${uri}" "${name}"
}

plugin::delete() {
    local name
    read -r name <<< "$@"
    [[ -d "${name}" ]] && rm -rf "${name}"
    plugin::unregister "${name}"
}

plugin::register() {
    local name
    read -r name <<< "$@"
    mr register "${name}"
    vcsh "${cfg_repo}" add "${mrconfig}"
    vcsh "${cfg_repo}" commit -m "Plugin ${name} registered in .mrconfig."
    if [[ -n "${vcsh_push}" ]]; then
        vcsh "${cfg_repo}" push
    fi
}

plugin::unregister() {
    local name
    read -r name <<< "$@"
    initool --file "${mrconfig}" --remove-section "${name}" || true
    vcsh "${cfg_repo}" add "${mrconfig}"
    vcsh "${cfg_repo}" commit -m "Plugin ${name} unregistered from .mrconfig."
    if [[ -n "${vcsh_push}" ]]; then
        vcsh "${cfg_repo}" push
    fi
}

plugin::sync() {
    local plugins dir
    local -a dirs
    plugins=$(plugin::list)
    while read -r dir; do
        dirs+=("${dir}")
    done < <(find "${bundles}" -type d -mindepth 1 -maxdepth 1 -printf "%f\n")
    for ((i=0; i<${#dirs[@]}; i++)); do
        dir="${dirs[$i]}"
        if [[ ! "${plugins}" == *${dir}* ]]; then
            rm -rf "${dir}" && echo "dangling directory removed: ${dir}."
        fi
    done
}

plugin::update() {
    plugin::update::all
}

plugin::update::all() {
    vcsh "${cfg_repo}" pull
    mr update
}

vpkg::prep() {
    [[ -f "$HOME/.mrtrust" ]] || touch "$HOME/.mrtrust"
    grep -q "${bundles}/.mrconfig" "$HOME/.mrtrust" || \
        echo "${bundles}/.mrconfig" >> "$HOME/.mrtrust"
}

main() {
    # error handling
    [[ -z "${VPKG_DEBUG}" ]] || set -x
    set -o errexit
    set -o errtrace
    set -o pipefail
    #set -o nounset
    trap 'on_error ${FUNCNAME[0]} ${LINENO} ${?}' ERR INT HUP

    : "${VPKG_LOGFILE:=/dev/null}"
    exec 2>${VPKG_LOGFILE}

    export bundles="$HOME/.vim/bundle"
    export mrconfig="$HOME/.vim/bundle/.mrconfig"
    export cfg_repo="rc-vim"
    vpkg::prep

    cd "${bundles}"
    if [[ $# < 1 ]]; then
        set -- "help"
    fi
    action="$1"; shift
    case "${action}" in
        add)
            plugin::add "$@" ;;
        del|delete|remove)
            plugin::delete "$1" ;;
        update)
            plugin::update ;;
        list)
            plugin::list ;;
        push)
            vcsh push ;;
        sync)
            plugin::sync ;;
        help|*)
            usage ;;
    esac
}

main $@
